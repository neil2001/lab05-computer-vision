%> ------------------------------------------------------------------------
%> ENGN2560: Computer Vision
%>    Lab05: Correspondences from Stereo Vision
%> Problem2: Stereo Matching Based on Inverse Depths
%> ------------------------------------------------------------------------
clc; clear all; close all;

%> Read an image pair
Img1 = imread('data/Problem2/Img1.png');
Img2 = imread('data/Problem2/Img2.png');

%> Load camera intrinsic matrix
load('data/Problem2/IntrinsicMatrix.mat');

%> Known (ground-truth) relative pose
load('data/Problem2/GT_R.mat');		%> R_gt
load('data/Problem2/GT_T.mat');		%> T_gt

M = K * [R_gt, T_gt];

%> Parameters
PARAMS.PATCH_SIZE               = 13;            %> 13x13 window
PARAMS.SSD_THRESH               = 900;           %> Threshold for average SSD         
PARAMS.DEPTH_SAMPLES            = 0.2:0.05:2.1;  %> Inverse depth samples

%> =======================================================================
%> TODO: Find potential matches from a stereo images using inverse depths
%> =======================================================================

img1_double = im2double(rgb2gray(Img1));
img2_double = im2double(rgb2gray(Img2));

imageSize = size(Img1);

% 2.1
corners1 = detectHarrisFeatures(img1_double);
cornerLocations = corners1.Location;

% 2.2
% Pad the images
w = floor(PARAMS.PATCH_SIZE/2);
Img1_Padded = padarray(img1_double, [w+1 w+1], 'replicate');
Img2_Padded = padarray(img2_double, [w+1 w+1], 'replicate');

% 2.3
%> Create griddedinterpolant structures for image gradient
[X, Y] = meshgrid(1:size(Img1_Padded,2), 1:size(Img1_Padded,1));
X = X'; Y = Y';
It_interp = griddedInterpolant(X, Y, Img1_Padded');

[X2, Y2] = meshgrid(1:size(Img2_Padded,2), 1:size(Img2_Padded,1));
X2 = X2'; Y2 = Y2';
It_interp2 = griddedInterpolant(X2, Y2, Img2_Padded');

% 2.4
corrIdxs = false(size(cornerLocations, 1), 1);
img2Corners = zeros(size(cornerLocations));

for ci=1:size(cornerLocations, 1)
    cornerX = cornerLocations(ci,1);
    cornerY = cornerLocations(ci,2);

    %> Get corner locations
    cx = cornerX+w+1;
    cy = cornerY+w+1;

    %> Get the locations of the patch attached to the corner
    [Patch_X, Patch_Y] = meshgrid(cx-w:cx+w, cy-w:cy+w);
    Patch_X = Patch_X'; Patch_Y = Patch_Y';

    %> Do interpolation to get photometry of the patch
    It_Patch = It_interp(Patch_X, Patch_Y);
    It_Patch = It_Patch(:);

    depthIdx = 0;
    minSSD = inf;
    candidateG2 = [];

    for depthIndex = 1:numel(PARAMS.DEPTH_SAMPLES)
        depthValue = PARAMS.DEPTH_SAMPLES(depthIndex);
    
        coordsInMeters = K \ [cornerX; cornerY; 1];
        p1g1 = depthValue * coordsInMeters;
        g2 = M * [p1g1; 1];
        g2 = g2(1:2) / g2(3);

        if (g2(1) < 1) || (g2(1) > imageSize(2)) || ...
           (g2(2) < 1) || (g2(2) > imageSize(1))
            continue
        end

        cx2 = g2(1)+w+1;
        cy2 = g2(2)+w+1;
        
        % Sanity check
        % [Patch_X2, Patch_Y2] = meshgrid(cx-w:cx+w, cy-w:cy+w);
        % Patch_X2 = Patch_X2'; Patch_Y2 = Patch_Y2';
        % 
        % %> Do interpolation to get photometry of the patch
        % It_Patch2 = It_interp(Patch_X2, Patch_Y2);
        % It_Patch2 = It_Patch2(:);
    
        %> Get the locations of the patch attached to the corner
        [Patch_X2, Patch_Y2] = meshgrid(cx2-w:cx2+w, cy2-w:cy2+w);
        Patch_X2 = Patch_X2'; Patch_Y2 = Patch_Y2';

        %> Do interpolation to get photometry of the patch
        It_Patch2 = It_interp2(Patch_X2, Patch_Y2);
        It_Patch2 = It_Patch2(:);
            
        ssd = sum((It_Patch - It_Patch2).^2) / (PARAMS.PATCH_SIZE)^2;

        % avgSSD = ssd / (PARAMS.PATCH_SIZE)^2;

        if ssd < PARAMS.SSD_THRESH && ssd < minSSD
            depthIdx = depthIndex;
            minSSD = ssd;
            candidateG2 = g2;
        end
    end
    
    if depthIdx ~= 0
        corrIdxs(ci) = true;
        img2Corners(ci, :) = candidateG2;
    end
end

cornerLocations = cornerLocations(corrIdxs, :);
img2Corners = img2Corners(corrIdxs, :);
nPoints = size(img2Corners, 1);

% imshow(Img1);
% hold on;
% 
% % Plot points on the image
% scatter(cornerLocations(:, 1), cornerLocations(:, 2), 5, 'r', 'filled'); 
% 
% hold off;
% title('Image with Points');
% 
% imshow(Img2);
% hold on;
% 
% % Plot points on the image
% scatter(img2Corners(:, 1), img2Corners(:, 2), 5, 'r', 'filled'); 
% 
% hold off;
% title('Image with Points');

draw_Feature_Matches(Img1, Img2, cornerLocations', img2Corners', nPoints, true)



