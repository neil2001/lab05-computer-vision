%> ------------------------------------------------------------------------
%> ENGN2560: Computer Vision
%>    Lab05: Correspondences from Stereo Vision
%> Problem1: Multi-Resolution Optical Flow
%> ------------------------------------------------------------------------
clc; clear all; close all;

%> Read all images in the sequence.
%> Use imread(Image_Sequence(i).name); to read image i
mfiledir = fileparts(mfilename('fullpath'));
Image_Sequence = dir([mfiledir, '/data/Problem1/fr3_household/*.png']);

PARAMS.LK_OPTICAL_FLOW_NUM_OF_LEVELS  = 2;
PARAMS.LK_OPTICAL_FLOW_WINDOW_SIZE    = 21; 

%> =============================================================
%> TODO: Implement Multi-Resolution Lucas-Kanade Optical Flow
%> =============================================================
nImgs = size(Image_Sequence, 1);
numLevels = PARAMS.LK_OPTICAL_FLOW_NUM_OF_LEVELS;
patchSize = PARAMS.LK_OPTICAL_FLOW_WINDOW_SIZE;

% 1.1
Img1 = imread(Image_Sequence(1).name);
ImgN = imread(Image_Sequence(end).name);

originalImage = im2double(rgb2gray(Img1));

imagePyramid = cell(1, numLevels);
imagePyramid{1} = originalImage;

for level = 2:numLevels
    imagePyramid{level} = impyramid(imagePyramid{level-1}, 'reduce');
end

% 1.2 
corners1 = detectHarrisFeatures(originalImage);

% 1.3
cornerLocations = corners1.Location;

for level=2:numLevels
    cornerLocations = 0.5 * cornerLocations; % DO THIS HERE?? 
end

% 1.4
allCornerFeatures = cell(1, nImgs);
allCornerFeatures{1} = cornerLocations * 2;
prevPyramid = imagePyramid;

for i=2:nImgs
    % constructing image pyramid
    currImg = imread(Image_Sequence(i).name);
    imagePyramid = buildImagePyramid(currImg, numLevels);

    imgSize = size(currImg);

    for level=2:numLevels
        [du, dv] = LucasKanadeOpticalFlow(prevPyramid{level}, imagePyramid{level}, cornerLocations, patchSize);
        cornerLocations = cornerLocations + [du, dv];
        
        [cornerLocations, cornerIdxs] = filterCorners(cornerLocations, imgSize);
        for j=1:(i-1)
            allCornerFeatures{j} = allCornerFeatures{j}(cornerIdxs, :);
        end
          
        cornerLocations = cornerLocations * 2;
    end

    allCornerFeatures{i} = cornerLocations;
    cornerLocations = cornerLocations * 0.5;
    prevPyramid = imagePyramid;
end 

numPoints = size(allCornerFeatures{1}, 1);
colors = distinguishable_colors(numPoints);

% Plot corresponding points with different colors -------------------------
% plotCorrespondingFeatures(Img1, ImgN, allCornerFeatures, colors);

% Superimposed ------------------------------------------------------------
% plotSuperimposedFeatures(Img1, allCornerFeatures, colors);

% USING ONLY ONE IMAGE LEVEL ----------------------------------------------
cornerLocations = corners1.Location;

oneImgFeaturesAll = cell(1, nImgs);
oneImgFeaturesAll{1} = cornerLocations;

for i=2:nImgs
    % constructing image pyramid
    currImg = imread(Image_Sequence(i).name);
    currImg = im2double(rgb2gray(currImg));
    imgSize = size(currImg);

    [du, dv] = LucasKanadeOpticalFlow(originalImage, currImg, cornerLocations, patchSize);
    cornerLocations = cornerLocations + [du, dv];
    oneImgFeaturesAll{i} = cornerLocations;
end

% Plot corresponding points with different colors -------------------------
plotCorrespondingFeatures(Img1, ImgN, oneImgFeaturesAll, colors);

% Superimposed ------------------------------------------------------------
plotSuperimposedFeatures(Img1, oneImgFeaturesAll, colors);


% FUNCTIONS ---------------------------------------------------------------
function plotCorrespondingFeatures(Img1, ImgN, allCornerFeatures, colors)
    numPoints = size(allCornerFeatures{1}, 1);

    figure;
    
    subplot(1, 2, 1);
    imshow(Img1);
    title('Corresponding Points in First Image');
    
    hold on;
    for i = 1:numPoints
        plot(allCornerFeatures{1}(i, 1), allCornerFeatures{1}(i, 2), 'o', 'MarkerEdgeColor', colors(i, :));
    end
    hold off;
    
    subplot(1, 2, 2);
    imshow(ImgN);  % Replace with the appropriate image
    title('Corresponding Points in Final Image');
    
    hold on;
    for i = 1:numPoints
        plot(allCornerFeatures{end}(i, 1), allCornerFeatures{end}(i, 2), 'o', 'MarkerEdgeColor', colors(i, :));
    end
    hold off;
end

function plotSuperimposedFeatures(Img1, allCornerFeatures, colors)
    nImgs = numel(allCornerFeatures);
    numPoints = size(allCornerFeatures{1}, 1);
    figure;
    imshow(Img1);
    title('Superimposed Points on Image 1');
    hold on;
    for i = 1:numPoints
        for j=1:nImgs
            plot(allCornerFeatures{j}(i, 1), allCornerFeatures{j}(i, 2), '.', 'MarkerEdgeColor', colors(i, :));
        end
    end
    hold off;
end

function colors = distinguishable_colors(n)
    % Generate a set of distinguishable colors
    % n: Number of colors needed
    
    goldenRatio = (1 + sqrt(5)) / 2;
    hueValues = mod(linspace(0, 1, n + 1), goldenRatio);
    
    saturation = 0.6;
    value = 0.9;
    
    colors = hsv2rgb([hueValues', saturation * ones(n + 1, 1), value * ones(n + 1, 1)]);
    colors = colors(1:n, :);
end

function [filteredCorners, withinBoundsIdx] = filterCorners(corners, imageSize)
    xCoords = corners(:, 1);
    yCoords = corners(:, 2);
   withinBoundsIdx = (xCoords >= 1) & (xCoords <= imageSize(2)) & ...
                     (yCoords >= 1) & (yCoords <= imageSize(1));
    
    filteredCorners = corners(withinBoundsIdx, :);
end

function [imagePyramid] = buildImagePyramid(currImg, numLevels)
    originalImage = im2double(rgb2gray(currImg));
    imagePyramid = cell(1, numLevels);
    imagePyramid{1} = originalImage;
    for level = 2:numLevels
        imagePyramid{level} = impyramid(imagePyramid{level-1}, 'reduce');
    end
end

