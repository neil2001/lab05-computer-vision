%> ------------------------------------------------------------------------
%> ENGN2560: Computer Vision
%>    Lab05: Correspondences from Stereo Vision
%> Problem3: Stereo Matching Based on Epipolar Geometry
%> ------------------------------------------------------------------------
clc; clear all; close all;

%> Read an image pair
Img1 = imread('data/Problem2/Img1.png');
Img2 = imread('data/Problem2/Img2.png');

%> Load camera intrinsic matrix
load('data/Problem2/IntrinsicMatrix.mat');

%> Known (ground-truth) relative pose
load('data/Problem2/GT_R.mat');		%> R_gt
load('data/Problem2/GT_T.mat');		%> T_gt

PARAMS.POINT_TO_EPIPOLAR_LINE_DIST      = 5;    %> 5 pixels
PARAMS.PATCH_SIZE                       = 7;    %> 7x7 window
PARAMS.SSD_THRESH                       = 900;	%> Threshold for average SSD  

%> =======================================================================
%> TODO: Find corner matches from a stereo images using epipolar geometry
%> =======================================================================

Tx = [0, -T_gt(3), T_gt(2); T_gt(3), 0, -T_gt(1); -T_gt(2), T_gt(1), 0];
E = Tx * R_gt;

K_inv = inv(K);

F = transpose(K_inv) * E / K;

% 3.1
img1Gray = rgb2gray(Img1);
img2Gray = rgb2gray(Img2);

img1_single = im2single(img1Gray);

img1_double = im2double(img1Gray);
img2_double = im2double(img2Gray);

imageSize = size(Img1);

corners1 = detectHarrisFeatures(img1_double);
corners2 = detectHarrisFeatures(img2_double);
cornerLocations1 = corners1.Location;
cornerLocations2 = corners2.Location;

cornerLocations2_homogenous = [cornerLocations2, ones(size(cornerLocations2, 1), 1)];
% cornerLocations2_meters = K \ cornerLocations2_homogenous';

% Pad the images
w = floor(PARAMS.PATCH_SIZE/2);
Img1_Padded = padarray(img1Gray, [w+1 w+1], 'replicate');
Img2_Padded = padarray(img2Gray, [w+1 w+1], 'replicate');

% 3.2 
[X, Y] = meshgrid(1:size(Img1_Padded,2), 1:size(Img1_Padded,1));
X = X'; Y = Y';
It_interp = griddedInterpolant(X, Y, Img1_Padded');

[X2, Y2] = meshgrid(1:size(Img2_Padded,2), 1:size(Img2_Padded,1));
X2 = X2'; Y2 = Y2';
It_interp2 = griddedInterpolant(X2, Y2, Img2_Padded');

% 3.3
corrIdxs = false(size(cornerLocations1, 1), 1);
img2Corners = zeros(size(cornerLocations1));
epipolar_lines = zeros(size(cornerLocations1, 1), 3);

for i=1:size(cornerLocations1, 1)
    cornerX = cornerLocations1(i,1);
    cornerY = cornerLocations1(i,2);

    %> Get corner locations
    cx = cornerX+w+1;
    cy = cornerY+w+1;

    %> Get the locations of the patch attached to the corner
    [Patch_X, Patch_Y] = meshgrid(cx-w:cx+w, cy-w:cy+w);
    Patch_X = Patch_X'; Patch_Y = Patch_Y';

    %> Do interpolation to get photometry of the patch
    It_Patch = It_interp(Patch_X, Patch_Y);
    It_Patch = It_Patch(:);

    % cornerInMeters = K \ [cornerX; cornerY; 1];
    % epipolar_line = F * cornerInMeters;

    epipolar_line = F * [cornerX; cornerY; 1];
    epipolar_lines(i,:) = epipolar_line';
    % epipolar_line = epipolar_line / norm(epipolar_line(1:2));
    distances = abs(epipolar_line' * cornerLocations2_homogenous')' / norm(epipolar_line(1:2));
    valid_points = cornerLocations2(distances < PARAMS.POINT_TO_EPIPOLAR_LINE_DIST, :);
   
    if size(valid_points, 1) == 0
        continue
    end

    depthIdx = 0;
    minSSD = PARAMS.SSD_THRESH;
    candidateG2 = [];

    for j=1:size(valid_points, 1)
        g2 = valid_points(j,:);

        cx2 = g2(1)+w+1;
        cy2 = g2(2)+w+1;
    
        %> Get the locations of the patch attached to the corner
        [Patch_X2, Patch_Y2] = meshgrid(cx2-w:cx2+w, cy2-w:cy2+w);
        Patch_X2 = Patch_X2'; Patch_Y2 = Patch_Y2';

        %> Do interpolation to get photometry of the patch
        It_Patch2 = It_interp2(Patch_X2, Patch_Y2);
        It_Patch2 = It_Patch2(:);

        ssd = sum((It_Patch - It_Patch2).^2) / (PARAMS.PATCH_SIZE)^2;

        if ssd < PARAMS.SSD_THRESH && ssd < minSSD
            depthIdx = j;
            minSSD = ssd;
            candidateG2 = g2;
        end
    end

    if depthIdx ~= 0
        corrIdxs(i) = true;
        img2Corners(i, :) = candidateG2;
    end
end

cornerLocations1 = cornerLocations1(corrIdxs, :);
img2Corners = img2Corners(corrIdxs, :);
nPoints = size(img2Corners, 1);
epipolar_lines = epipolar_lines(corrIdxs, :);

% % Display the second image
% figure;
% imshow(Img2);
% hold on;
% 
% % Plot points in image 1
% plot(img2Corners(:, 1), img2Corners(:, 2), 'go', 'MarkerSize', 10, 'LineWidth', 2);
% 
% % Draw epipolar lines in image 2
% for i = 1:size(epipolar_lines, 1)
%     % Get the i-th epipolar line coefficients
%     epipolarLine = epipolar_lines(i, :);
% 
%     % Plot the epipolar line in image 2
%     plot([1, size(Img2, 2)], -epipolarLine(1)/epipolarLine(2) * [1, size(Img2, 2)] - epipolarLine(3)/epipolarLine(2), 'r', 'LineWidth', 1);
% end
% 
% title('Points and Epipolar Lines in Image 2');
% hold off;

draw_Feature_Matches(Img1, Img2, cornerLocations1', img2Corners', nPoints, true)
